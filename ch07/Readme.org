#+TITLE: Understanding the Processor
#+LATEX_HEADER: \usepackage[scaled]{helvet} \renewcommand\familydefault{\sfdefault}
#+LATEX_HEADER_EXTRA: \usepackage{mdframed}
#+LATEX_HEADER_EXTRA: \BeforeBeginEnvironment{minted}{\begin{mdframed}}
#+LATEX_HEADER_EXTRA: \AfterEndEnvironment{minted}{\end{mdframed}}

* Load and store

** Store
A non-atomic store and a relaxed atomic store compile to the same assembly code.

#+begin_src rust
  // Non-atomic store
  pub fn a(x: &mut i32) {
      *x = 0;
  }

  // Atomic store
  pub fn a(x: &mut AtomicI32) {
      x.store(0, Relaxed)
  }

#+end_src


Compiled x86-64:
#+begin_src asm
  a:
      mov dword ptr [rdi], 0
      ret
#+end_src
Translation: Copy data from the zero constant to a memory address stored in the register ~rdi~.

Compiled ARM64:

#+begin_src asm
  a:
        str wzr, [x0]
        ret
#+end_src
Translation: Copy data from the ~wzr~ register (always containing 0) to the memory address stored in the register ~x0~.

** Load
A non-atomic load and an atomic load with Relaxed ordering compile to the same assembly code.

Source code:
#+begin_src rust
  // Non-atomic load
  pub fn a(x: &i32) -> i32 {
      *x
  }
  // Atomic load with relaxed ordering
  pub fn (x: &AtomicI32) -> i32 {
      x.load(Relaxed)
  }
#+end_src

Compiled x86-64, for both source code versions:
#+begin_src asm
  a:
      mov eax, dword ptr [rdi]
      ret
#+end_src

Compiled ARM64, for both source code versions:
#+begin_src asm
  a:
      ldr w0, [x0]
      ret
#+end_src

* Read-modify-write operations
** Non-atomic read-modify-write operations

#+begin_src rust
  pub fn a(x: &mut i32) {
      ,*x += 10;
  }
#+end_src

On x86-64, the statement can /usually/ be done with a single instruction:
#+begin_src asm
  a:
          add dword ptr [rdi], 10
          ret
#+end_src
However, the ~add~ statement is not atomic, because the processor splits it into several /micro-instructions/.

On ARM64, the statement /usually/ compiles to 3 instructions:
#+begin_src asm
  a:
          ldr w8, [x0]
          add w8, w8, #10
          str w8, [x0]
          ret
#+end_src

** The ~lock~ prefix on x86-64

#+begin_src rust
  pub fn a(x: &mut AtomicI32) {
      x.fetch_add(10, Relaxed);
  }
#+end_src

Compared to the non-atomic version, the ~lock~ prefix is added to the instruction:
#+begin_src asm
  a:
          lock add dword ptr [rdi], 10
          ret
#+end_src

If we return the sum, ~xadd~ is used instead of ~add~:
#+begin_src rust
  pub fn a(x: &mut AtomicI32) -> i32 {
      x.fetch_add(10, Relaxed)
  }
#+end_src
compiles to

#+begin_src asm
  a:
        mov eax, 10
        lock xadd dword ptr [rdi], eax
        ret
#+end_src
Instead of using the constant 10, now the code stores 10 in the register ~eax~. The ~xadd~ instruction then stores the result in that register.

The lock prefix can be added to several instructions, including:
- ~add~, ~xadd~ (as discussed above)
- ~sub~
- ~and~
- ~or~
- ~xor~
- ~xchg~ (exchange), with the lock prefix implicitly added
- ~bts~ (bit test and set)
- ~btr~ (bit test and reset)
- ~btc~ (bit test and complement)


* Cache coherence
** Write-through protocol

** MESI protocol

* Re-ordering

** Re-ordering by the processor

Several ways that a processor can execute instructions out of order:

- Store buffer: Processor cores often have a /store buffer/ which is fast to write to. A processor can write to this buffer then continue to the next instruction. In the background

** Invalidation queues

Invalidation: Instructions to drop a cache line because it is about to be modified and become invalid.
For performance reason, such requests can be queued for later processing.
In such scenarios, the caches are no longer always consistent: cache lines may be shortly outdated before they are dropped.

- This doesn't impact single threaded programs.
- This impacts the visibility of write operations from other cores, which now may appear as slightly delayed.

** Pipelining

Pipelining :: executing sequential operations in parallel if possible.

- This doesn't impact single threaded programs.
- In multi-threaded program, interaction with other cores might happen out of order when an instruction that operates on memory finishes executing before a preceding one does.

Apart from these techniques, there can be other proprietary techniques with similar effect.

* Summary

Assembly instructions

- Load:

|--------+------------+---------+---------+--------|  
|        | non-atomic | Relaxed | Acquire | SeqCst |
|--------+------------+---------+---------+--------|
| ARMv8  | ldr        | <-      | ldar    | <-     |
|--------+------------+---------+---------+--------|
| x86_64 | mov        | <-      | <-      | <-     |
|--------+------------+---------+---------+--------|


- Store:
|--------+------------+---------+---------+--------|
|        | non-atomic | Relaxed | Release | SeqCst |
|--------+------------+---------+---------+--------|
| ARMv8  | str        | <-      | stlr    | <-     |
|--------+------------+---------+---------+--------|
| x86_64 | mov        | <-      | <-      | xchg   |
|--------+------------+---------+---------+--------|

- Swap:

|---------+------------+----------------+-----------------+-----------------+------------------+--------|
|         | non-atomic | Relaxed        | Acquire         | Release         | AcqRel           | SeqCst |
|---------+------------+----------------+-----------------+-----------------+------------------+--------|
| ARMv8   | ldr str    | ldxr stxr cbnz | ldaxr stxr cbnz | ldxr stlxr cbnz | ldaxr stlxr cbnz | <-     |
|---------+------------+----------------+-----------------+-----------------+------------------+--------|
| ARMv8.1 | ldr str    | swp            | swpa            | swpl            | swpal            | <-     |
|---------+------------+----------------+-----------------+-----------------+------------------+--------|
| x86_64  | mov mov    | xchg           | <-              | <-              | <-               | <-     |
|---------+------------+----------------+-----------------+-----------------+------------------+--------|
