#+TITLE: Operating System Primitives

* POSIX

Synchronization primitives with POSIX pthreads:

|----------------------+---------------------------|
| Data type            | Functions                 |
|----------------------+---------------------------|
| =pthread_mutex_t=    | =pthread_mutex_init=      |
|                      | =pthread_mutex_destroy=   |
|                      | =pthread_mutex_lock=      |
|                      | =pthread_mutex_unlock=    |
|                      | =pthread_mutex_timedlock= |
|----------------------+---------------------------|
| =pthread_rwlock_t=   | =pthread_rwlock_init=     |
|                      | =pthread_rwlock_destroy=  |
|                      | =pthread_rwlock_rdlock=   |
|                      | =pthread_rwlock_wrlock=   |
|                      | =pthread_rwlock_unlock=   |
|----------------------+---------------------------|
| =pthread_cond_t=     | =pthread_cond_init=       |
|                      | =pthread_cond_destroy=    |
|                      | =pthread_cond_timedwait=  |
|                      | =pthread_cond_broadcast=  |
|                      | =pthread_cond_signal=     |
|----------------------+---------------------------|
| =pthread_barrier_t=  | [Not discussed]           |
|----------------------+---------------------------|
| =pthread_spinlock_t= | [Not discussed]           |
|----------------------+---------------------------|

From the book: The POSIX API works with C, but difficult in Rust.

* LINUX
=futex=: Fast Userspace Mutex

|---------------------+------------------------------------------------------------------|
| Operation           | Explanation                                                      |
|---------------------+------------------------------------------------------------------|
| =FUTEX_WAIT=        | Wait until being waken up or timeout                             |
| =FUTEX_WAKE=        | Wake up a specified number of threads                            |
| =FUTEX_WAIT_BITSET= | Similar to =FUTEX_WAIT=, but can select specific wait operations |
| =FUTEX_WAKE_BITSET= | Similar to =FUTEX_WAKE=, but can select specific wake operations |
| =FUTEX_REQUEUE=     | Wake up a given number of threads, then =requeues= a given       |
|                     | number of remaining waiting threads on another atomic variable   |
| =FUTEX_CMP_REQUEUE= | Simular to =FUTEX_REQUEUE=, but only perform the operation if    |
|                     | the primary atomic matches a given                               |
| =FUTEX_WAKE_OP=     | (1) Modify a secondary atomic variable,                          |
|                     | (2) Wake a number of threads waiting on a primary atomic         |
|                     | variable,                                                        |
|                     | (3) Check if the previous value of the atomic variable matches   |
|                     | a given condition                                                |
|                     | (4) If so, also wake a number of threads on a secondary atomic   |
|                     | variable.                                                        |
|---------------------+------------------------------------------------------------------|



